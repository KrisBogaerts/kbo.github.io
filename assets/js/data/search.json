[ { "title": "Open Source & Collaborative Security with CrowdSec Part 1", "url": "/posts/Open-Source-Collaborative-Security-with-CrowdSec-Part-1/", "categories": "Open Source, Cybersecurity, IPS", "tags": "security, crowdsec, endlessh, fail2ban, debian", "date": "2022-09-14 00:00:00 +0200", "snippet": "IntroCrowdSec is an open-source and collaborative IPS (Intrusion Prevention System). It leverages local behavior analysis to create a global IP reputation network. Analyze behaviors, respond to attacks &amp; share signals across the community. With CrowdSec, you can set up an intrusion detection system that parses logs, detects and blocks threats, and shares bad actors with the larger CrowdSec community.CrowdSec founds on Fail2Ban’s original philosophy but is told to be 60x faster and not just a protection against brute-force attacks. You integrate with NGINX, Traefic,… based on collection packages that contain logic, parsers and actions. These actions can be executed by what is called a bouncer.ConceptCrowdSec revolves around the following concepts: It reads logs (defined via data sources configuration) Those logs are parsed via parsers and eventually enriched Those normalized logs are matched against the scenarios that the user has deployed When a scenario is “triggered”, CrowdSec generates an alert and eventually one or more associated decisions: The alert is mostly traceability and will stay even after the decision expires The decision, is short-lived and tells what action should be taken against the offending IP/range/user… This information (the signal, the associated decisions) is then sent to crowdsec’s Local API and stored in the database. CrowdSec itself does the detection part and stores those decisions. Then, bouncers can “consume” those decisions via the same Local API and apply remediation. Crowd SourcedWhenever the Local API receives an alert with associated decisions, it shares the alert’s meta-information with the central API: The source IP address that triggered the alert The scenario that was triggered The timestamp of the attackThis data is processed and redistributed to relevant blocklists and all the participants.BouncersBouncers are “standalone software pieces [that are] in charge of acting upon a decision taken by CrowdSec”: block an IP, present a captcha, enforce MFA on a given user, etc. They can either be within the applicative stack, or work out of bandBouncers are utilizing the local API](https://docs.crowdsec.net/docs/local_api/intro/) on the CrowdSec agent to get information about an IP.Per CrowdSec’s documentation, it is suggested to install the common firewall bouncer.Data SourcesTo be able to detect things, crowdsec needs to access logs. DataSources are configured via the acquisition configuration, or specified via the command-line when performing cold logs analysis.They can be gathered from Files, Journald, AWS Cloudwatch, Syslog service, docker, Windows Event Log and AWS Kinesis.ParsersA parser is a YAML configuration file that describes how a string must be parsed. A string can be a log line, or a field extracted from a previous parser.Scenario’sScenario’s are YAML files that allow to detect a specific behavior, usually an attack.Scenarios receive events and can produce alerts using the leaky bucket algorithm.CollectionsCollections are bundle of parsers, scenarios, postoverflows in a package.I recommend reading the CrowdSec Documentation for a more detailed overview.Too many details to read let’s start with the fun stuff!CrowdSec (Hub) Installationcurl -s https://packagecloud.io/install/repositories/crowdsec/crowdsec/script.deb.sh | sudo bashsudo apt install crowdsec -yCrowdSec is now running. The application lives in the folder \\etc\\crowdsec using less than 0.5 MBytes of storage. The CrowdSec package is only in charge of the “detection”, and won’t block anything on its own. You need to deploy a bouncer to “apply” decisions.Bouncer Installationsudo apt install crowdsec-firewall-bouncer-iptables -yA local API connection is automatically created when installing the CrowdSec hub and the CrowdSec Firewall bounder on the same machine.Validate the bouncer connection with:sudo cscli bouncers listThe output of the cscli bouncers list shows that a locally running firewall bouncer is registered.Installing Scenarios or CollectionsCrowdSec is not much fun without the right collections or scenarios installed. This test server will be directly exposed to the internet and there’s a high risk of it being hit by drive-by port scanning. We want to detect those and block them. Later in this tech note, we will install Endlessh as SSH tarpit that slowly sends an endless banner and hopefully, we can gather some stats and see CrowdSec in action.There is an Endlessh collection package available which contains a log parser and supports brute force detection. Let’s install this collection on the hub:sudo cscli collections install crowdsecurity/endlesshsudo systemctl reload crowdsecCheck the installed collections:sudo cscli collections listCrowdSec comes by default with linux and sshd collection package active after installation and we added the Endlessh collection.Let’s check the installed scenarios:sudo cscli scenarios listLet add the iptables-scan-multi_ports scenario to the list and reload the crowdsec service.sudo cscli scenarios install crowdsecurity/iptables-scan-multi_portssudo systemctl reload crowdsecIn addition, let’s make sure we have the latest scenarios and parser installed.sudo cscli hub updatesudo cscli hub upgradesudo systemctl reload crowdsecCrowdSec ConsoleTo be able to enroll your CrowdSec instance in the Console, the first thing you need to do is to sign up by clicking the ‘Subscribe’ button on https://app.crowdsec.net. Once you’ve done that it’s time to enroll agents.First, we need to tell the CrowdSec agent to enroll in the console. In the console you will see a message with the command and key to enroll the agent to the console. If you already have an agent installed then use the “Add Instance” button on the top right.sudo cscli console enroll &lt;key&gt;sudo systemctl restart crowdsecNext you should see an “Instance enroll request” in console, accept and enroll to finish.Installing a serviceCrowdSec is all about collecting and sharing threat intelligence, as mentioned want to install endlessh, an ssh tarpit that’s really good at annoying attackers by keeping them busy and wasting their time.Moving SSH to a Non-Standard PortFirst, we need to move our SSH service to e Non-Standard Port to free up port 22 for Endlessh. Because botnets don’t have endless resources, they typically scan just the default SSH port (22).To begin, make a backup of your SSH config file from your server with the following command:sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bakThis file can be used to restore the original settings if something doesn’t work or if you decide to move SSH back to the default port.Open the SSH configuration file /etc/ssh/sshd_config using nano or your favorite text editor:sudo nano /etc/ssh/sshd_configLocate the line ‘'’Port 22’’’ and Uncomment this line by removing the #, and then change the port to port 2222 on your server:...Port 2222... If your server is using a firewall, such as UFW, make sure you allow traffic to this new port from your management IP address.Restart the SSH servicesudo systemctl restart sshd Do not close your active SSH session unless you have confirmed you can use SSH on the new port. If you can’t connect through the new port, you risk losing access to your server by closing the session. If you cannot connect to your server in a separate terminal session, you can restore your original SSH settings.You can connect to your host with an additional -p 2222 to the SSH commandssh root@&lt;your-host&gt; -p 2222Enable UFW as Firewall, allow port 22/2222 and enable loggingapt-get install ufwsudo ufw allow 2222/tcpsudo ufw allow 22/tcpsudo ufw enableufw logging highInstalling Endlesshsudo apt-get -y install endlesshBy default, endlessh is not permitted to start on privileged ports (&lt; 1024).This is how to do it for Debian 11:sudo nano /usr/lib/systemd/system/endlessh.serviceUpdate the file by removing # at the beginning of the line with AmbientCapabilities=CAP_NET_BIND_SERVICE and adding # to the beginning of the line PrivateUsers=trueNext, you will allow Endlessh to run on ports lower than 1024, also referred to as internet domain privileged ports. Set this capability for the Endlessh binary with the setcap command:sudo setcap 'cap_net_bind_service=+ep' /usr/bin/endlesshEndlessh needs to be configured to run on port 22 and to log (to /var/log/syslog by default). Create the file /etc/endlessh/configsudo nano /etc/endlessh/configAdd the following textPort 22Delay 10000MaxLineLength 32MaxClients 4096LogLevel 1BindFamily 0Re-nable the Endlessh service and restart:sudo systemctl --now enable endlesshsudo systemctl restart endlesshCheck the service status```bashsudo systemctl status endlesshYou should see the service running on port 22Additionally, you can check the port also with:sudo netstat -ltnp | grep endlesshConfigure the CrowdSec Data SourceSyslog will be the data source for this host. We can enable the acquisition of Sin the CrowdSec ```acquis.yaml`` file.sudo nano /etc/crowdsec/acquis.yamlfilenames: - /var/log/auth.loglabels: type: syslog---filenames: - /var/log/kern.log - /var/log/messageslabels: type: syslog---filenames: - /var/log/sysloglabels: type: endlessh---CrowdSec MetricsRun sudo cscli metricsto see the metrics. there should be activity on the parsers as “PARSED”.It can take some time but you should CrowdSec banning IP addresses when something is trying to connect via SSH.cscli decisions listCrowdSec CommandsHow to ban an IP:sudo cscli decisions add --ip 192.168.0.1How to un-ban an IP:sudo cscli decisions delete --ip 192.168.0.1ClosingWow, too much information for one note. This was “Open Source &amp; Collaborative Security with CrowdSec Part 1”.In part 2 we will go for a deep dive into the result and how we get more out of it.In part 3 we will install CrowdSec on Home Assistant to secure remote access in combination with Cloudflare.Good luck!" }, { "title": "How to run Home Assistant OS on MacOS M1 with UTM", "url": "/posts/How-to-run-Home-Assistant-HassOS-on-MacOS-M1-with-UTM/", "categories": "Virtualization, Smart Home, MacOS", "tags": "Home Assistant, Home Assistant Operating system, MacOS, Macbook Pro M1, arm64, UTM", "date": "2022-09-10 00:00:00 +0200", "snippet": "Testing configuration/add-ons on my Home Assistant production instance comes with a risk.I always used the Home Assistant add-on development container with Visual Studio Code, but today I needed the journal inside the Crowdsec add-in, and it seems that this is not available in the dev container.Also, rebuilding HA and restoring backups comes with some frustrations :-). Using a MacBook Pro M1 and VMWare fusion does not seem to with Home Assistant Operating system.This note is about installing the Home Assistant Operating system on my MacBook Pro M1 with UTM as Hypervisor. This should give me full virtualization and cloning (but no snapshots), which should make my life easier when testing and creating tech notes.Home Assistant Operating systemDownload the HA OS aarch64 qcow2 image and extractUTM (Securely run operating systems on your Mac)Download and install UTM Install the Home Assistant Operating system virtual machineCreate a Virtual machine:Choose VirtualizeType LinuxSelect the downloaded (extracted) imageleave defaultOn the summary page, enter a name and select open VM settingsChange the networking to bridge modeSelect the VirtIO drive and deleteSelect “New Drive”Import the qcow2 HA OS image and saveStart the VM and this should give you the details to connect to the Home Assistant interfaceUpdate 11/09/22: Expand diskDefault image comes with a disk size of 5GB which is not sufficient.Install Qemu On MacOS Assuming that you already have homebrew installedqemu-img lies within the qemu package, so we’ll need to install that. Open Terminal on your Mac.Wait for the installation to finish.brew install qemuResizing the disk Open UTM, right click your VM and select “Show in Finder” Right click the .utm file and “Show Package Contents” Open the “Images” folder, and now you’ll see your imported and created disk images. Your hard drive should be named something like disk.qcow2. Open Terminal on your Mac Drag your disk.qcow2 into the terminal window, to paste its path. You can also manually enter the path if you prefer that. Change your command, it should look something like this: qemu-img resize /Users/user/Library/Containers/com.utmapp.UTM/Data/Documents/Home\\ Assistant\\ OS\\.utm/Images/haos_generic-aarch64-9.0.rc2.qcow2 20G Press Enter to execute the commandIt should say: Image resized. Now you should be able to start the VM, and the disk should be resized to your desired amount. Home Assistant OS will automatically use this new space and resizes the partition. Go to Setting -&gt; System -&gt; Storage for validationQuick tech note with the steps that worked for me. I am still testing and validating how stable this works. Good luck!" }, { "title": "How to run Windows 11 on MacBook Pro M1 with VMware Fusion", "url": "/posts/How-to-run-Windows11-on-MacBook-Pro-M1-with-VMware-Fusion/", "categories": "Virtualization, Windows, MacOS", "tags": "VMware Fusion, Windows 11, MacOS, Macbook Pro M1, arm64", "date": "2022-08-30 00:00:00 +0200", "snippet": "VMware Fusion Public Tech Preview 22H2Installing Windows on Macs with M1 and VMware Fusion was not working for me. Something to think about when buying a new MacBook Pro if you depend on virtualization. VMware Fusion released the public tech preview 22H2, which supports Windows 11 arm64 on a MacBook Pro M1 processor. Interesting, but the default Windows 11 does not come with a driver for the vxnet3 network card type. A virtual machine without network connectivity is pretty useless. Changing the card to e1000 type in the vmx file worked, but installing the VMware tools during the installation is a better solution. Here are my notes on how it worked for me.Download and Install VMware Fusion Public Tech Preview 22H2 from the following linkDownload Windows 11 installerFor this we will use arm64 version of Windows 11, you can download it from uupdump.net.I used the “Latest Public Release build” -&gt; arm64Once you download the archive, open or extract it on your disk. You will need the file: uup_download_macos.shYou will also need a couple of utilities on MacOS before you can run this scriptGet utilities and create the Windows 11 ISO fileTo install the required utilities you need to use Homebrew (the package manager for Mac OS).If you don’t have brew, get the installation instructions from: https://brew.sh/Open your terminal and install the following utilities:brew tap minacle/chntpwbrew install aria2 cabextract wimlib cdrtools minacle/chntpw/chntpwIn your terminal, go to the downloaded archive folder and run the script.bash uup_download_macos.shIt will download all relevant files and it will take a couple of minutes. When finished you will have a new .iso file in that folder. For example: 22000.1_PROFESSIONAL_ARM64_EN-US.ISO. This is our Windows 11 installer.# Installation Windows 11 Virtual MachineCreate the Windows 11 arm64 virtual machine type and select the ISO file as source. You can keep the default setting or change them to your needs. Make sure to select “advanced” or new installation and not upgrade existing on the disk selection screen.Follow the normal installation steps but do not answer any of the questions when you see the following screen.Instead, press Shift-fn-F10 to open a command line prompt.In the VM command line prompt, execute PowerShellpowershellThe Windows command line prompt will be replaced by a PowerShell prompt.From the VMware Fusion menu bar, select Virtual Machine &gt; Install VMware Tools. Click “Install” on the dialog when prompted. The VMware Tools ISO will be mounted toyour VM as the D: drive.Wait a few moments while the VMware Tools ISO is being mounted to the VM.In the PowerShell window, install the VMware Tools by executing the following commands:D:Set-ExecutionPolicy RemoteSigned.\\setup.ps1Reboot your VM via the same command prompt when finished.shutdown /r /t 0The VM will reboot, and the Windows setup will restart at the point where we switched to the command prompt. Continue with the setup. You will not be prompted for a network connection because the network should now be discovered and operational with the vxnet3 VMware driver. Note that since the VM now has a network connection Windows may update itself “to the latest version” during initial setupGood luck!" }, { "title": "Home Assistant remote access with CloudFlare Tunnel", "url": "/posts/HomeAssistant-RemoteAccess-with-CloudflareTunnel/", "categories": "Smart Home, Home Assistant, Cloudflare, Remote Access", "tags": "Home Assistant, Smart Home, Cloudflare Tunnel, writeup", "date": "2022-08-29 00:00:00 +0200", "snippet": "Cloudflare TunnelCloudflare Tunnel provides you with a secure way to connect your resources to Cloudflare without a publicly routable IP address. With Tunnel, you do not send traffic to an external IP — instead, a lightweight daemon in your infrastructure (cloudflared) creates outbound-only connections to Cloudflare’s edge. Cloudflare Tunnel can connect HTTP web servers, SSH servers, remote desktops, and other protocols safely to Cloudflare. This way, your origins can serve traffic through Cloudflare without being vulnerable to attacks that bypass Cloudflare.How it worksCloudflared establishes outbound connections (tunnels) between your resources and the Cloudflare edge. Tunnels are persistent objects that route traffic to DNS records. Within the same tunnel, you can run as many cloudflared processes (connectors) as needed. These processes will establish connections to the Cloudflare edge and send traffic to the nearest Cloudflare data center.Home Assistant Add-on: Cloudflared Publishing Home Assistant directly on the internet is not without any risk. This technical note helps with the configuration and several security measures, but use this configuration or the Cloudflare Tunnel at your own risk. Using https://www.nabucasa.com/ or Home Assistant cloud is recommended.Cloudflared connects your Home Assistant instance via a secure tunnel to a domain or subdomain at Cloudflare. It exposes your Home Assistant to the Internet without opening ports on your router. Additionally, you can utilize Cloudflare Teams, their Zero Trust platform, to further secure your Home Assistant connection.To use this add-on, you have to own a domain name (e.g. example.com) and use the DNS servers of Cloudflare. If you do not have one, you can get one for free at Freenom. Please make sure to be compliant with theCloudflare Self-Serve Subscription Agreement when using this add-on. Especially section 2.8 could be breached when mainly streaming videos or other non-HTML content.Read the full add-on documentationInstallation Prerequisites Make sure to remove all other add-ons or configuration entries handling SSL certificates. That means if you already have the DuckDNS add-on, Let’s Encrypt add-on, or something similar, or you have manually configured some SSL certificates in your Home Assistant, you have to remove them. You have to have a working Cloudflare setup with a domain name, and we already have that, so we are good to go. And the last prerequisite is to decide whether to use a local or managed tunnel (We are going to use a local one) To install this add-on, manually add the HA-Addons repository link https://github.com/brenner-tobias/ha-addons to Home Assistant. Go to Settings, Add-ons, and Add-on Store. Select repositories from the upper right menu. Add https://github.com/brenner-tobias/ha-addons Select the Cloudflared addon from the list and click install. Go to the add-on configuration and provide you external hostname and Cloudflare tunnel name. Enable IP banning and the x-forwarded-fore header use in Home Assistant. This will enable IP banning after 5 failed logging attempts and the processing of the original web client IP address via the x-forwarded-for header in Home Assistant. Paste the following lines inside the configuration.yaml and save. http: ip_ban_enabled: true login_attempts_threshold: 5 use_x_forwarded_for: true trusted_proxies: - 172.30.33.0/24 Restart Home Assistant. Do not start the add-on yet.Securing Access to the Cloudflare Account The add-on downloads, after authentication, a cert.pem file to authenticate your instance of Cloudflare against your Cloudflare account. You can not revoke access to this file from your cloudflare account! https://github.com/cloudflare/cloudflared/issues/93Work Around Create a new (secondary) Cloudflare account and invite it to yourCloudflare (primary) account that manages your domain (https://dash.cloudflare.com/sign-up) Cloudflare Dashboard-&gt; Manage Account-&gt; Members-&gt; Invite Member Instead of using your primary account to authenticate the tunnel, use your secondary account. If your cert.pem file is compromised, you can revoke your secondary account from your primary account.Connection Start the Cloudflared add-on Check the logs of the “Cloudflare” add-on. You need to copy a URL from the logs and visit it to authenticate. Make sure to use the secondary account for authentication and select the primary account for tunnel creation and validation! Check the add-on logs for [15:11:13] INFO: Finished setting-up the Cloudflare tunnels6-rc: info: service init-cloudflared-config successfully starteds6-rc: info: service cloudflared: startings6-rc: info: service cloudflared successfully starteds6-rc: info: service healthcheck: startings6-rc: info: service healthcheck successfully starteds6-rc: info: service legacy-services: startings6-rc: info: service legacy-services successfully started[15:11:13] INFO: Starting Cloudflared Healthcheck for Home-Assistant add-on.[15:11:14] INFO: Connecting Cloudflared Tunnel.. Additional SecurityCloudflareBy using Cloudflare (as a proxy), we can add additional security to the connection.Only allow traffic on HTTP and HTTPS on the Cloudflare edge for Home Assistant The connection itself, other ports 80 and 443, will not work, but it is better to block all other ports on the CloudFlare edge. Open the Cloudflare dashboard and go to your website e.g. domain and select Security and then WAF in the left pane. Create a firewall rule with the following expression (edit expression or use the expression builder if you prefer that). http.host eq \"ha.yourdomain.com\" and not cf.edge.server_port in {80 443} Choose action Block and deploy firewall ruleOnly allow traffic from specific countries (for me, Belgium and the Netherlands is sufficient). This will also prevent global scanning and reconnaissance and list your home assistant url Open the Cloudflare dashboard and go to your website, e.g. domain, and select Security and then WAF in the left pane Create a firewall rule with the following expression (edit expression or use the expression builder if you prefer that) (http.host in {\"ha.yourdomain.com\"} and not ip.geoip.country in {\"NL\" \"BE\"}) Choose action Block and deploy firewall ruleDeny access from the internet to the Home Assistant /local URI Files served from the www/local folder, aren’t protected by the Home Assistant authentication. Files stored in this folder, if the URL is known, can be accessed by anybody without authentication. https://github.com/home-assistant/core/issues/31821 Open the Cloudflare dashboard and go to your website, e.g. domain, and select Security and then WAF in the left pane Create a firewall rule with the following expression (edit expression or use the expression builder if you prefer that). (http.host in {\"ha.yourdomain.com\"} and http.request.uri.path eq \"/local\") Choose action Block and deploy firewall ruleRedirect all HTTP to HTTPS and minimum TLS version Open the Cloudflare dashboard and go to your website, e.g. domain, select SSL/TLS and then Egd e Certificates in the left pane Enable Always Use HTTPS Select TLS1.2 as the Minimal TLS version. Bot Fight Mode Open the Cloudflare dashboard and go to your website e.g. domain and select Security and then Bots in the left pane Enable Bot Fight Mode this could break something as it injects javascript to match patterns of known bots. For me, everything is working fine. Do not forget to secure your primary and secondary Cloudflare accounts with Multi-Factor authenticationHome AssistantSecure your Home Assistant login with multi-factor authentication.https://www.home-assistant.io/docs/authentication/multi-factor-auth/ By default, the totp module named authenticator app will be autoloaded.You can turn MFA on and off on the profile page for your user account.IP banning (and x-forwarded-for)Previously enabled -&gt; Home Assistant Add-on: Cloudflare -&gt; Installation -&gt; Step 6Home Assistant notifications Home Assistant provides notifications in the app in the notification center. I prefer to also have a notification on my mobile when there is a failed logon or an IP is banned.Failed logon notificationalias: Send notification upon failed login attempttrigger: - platform: state entity_id: persistent_notification.http_logincondition: - condition: template value_template: \"\"action: - service: notify.mobile_app data_template: title: \"\" message: &gt;- url: https://whatismyipaddress.com/ip/IP Ban notificationalias: Send notification upon banned IPdescription: \"\"trigger: - platform: state entity_id: - persistent_notification.ip_bancondition: - condition: template value_template: \"\"action: - service: notify.mobile_app data_template: title: \"\" message: \"\"mode: singleValidationConnection, logon, and Multi-Factor authenticationOpen a new browser tab and connect to your external hostname; for example, https://ha.mydomain.com.Only allow traffic from specific countries. Change the Cloudflare Firewall rule to DE as a country for validation and save (http.host in {\"ha.yourdomain.com\"} and not ip.geoip.country in {\"NL\" \"DE\"}) Open a new browser tab and connect to your external hostname; for example, https://ha.mydomain.com. You should receive Access Denied. Check the logs in Cloudflare -&gt; Security -&gt; Overview.You should see the Action Taken Block with the rule name and extra details. Change the firewall rule back to its original configuration and validate the connection. (http.host in {\"ha.yourdomain.com\"} and not ip.geoip.country in {\"NL\" \"BE\"}) Failed logon and notification Open a new browser tab and connect to your external hostname; for example https://ha.mydomain.com and use a wrong username and password.This should give you a persistent notification in the notification center in the Home Assistant dashboard and a notification on your mobile or other device that you have configured. This should give you you client IP address via the x-forwarded-for header and not the IP address of the Cloudflared proxy (Check your IP address on https://ping.eu/) IP Ban and notification Open a new browser tab and connect to your external hostname; for example https://ha.mydomain.com and use a wrong username and password for a minimum 5 times.This should give you a persistent notification in the notification center in the Home Assistant dashboard and a notification on your mobile or other device that you have configured. This should give you your client IP address via the x-forwarded-for header and not the IP address of the Cloudflared proxy (Check your IP address on https://ping.eu/) This will create a new file ip_ban.yaml with the relevant IP address and time of the ban You can remove the complete entry restart Home Assistant to remove the ban ### Deny access from the internet to the /local URI Open a new browser tab and connect to your external hostname; for example https://ha.mydomain.com/localYou should receive Access Denied Check the logs in Cloudflare -&gt; Security -&gt; Overview. You should see Action taken Block with the rule name and extra details Redirect all HTTP to HTTPSOpen a new browser tab and try to connect to your external hostname with HTTP, for example, http://ha.mydomain.com.This should be redirected to HTTPS" }, { "title": "New Github Pages blog with Jekyll and the Chirpy theme", "url": "/posts/new-blog-with-jekyll-and-chirpy-theme/", "categories": "Github, Blog, Jekyll", "tags": "github, blog, writeup, jekyll", "date": "2022-08-28 00:00:00 +0200", "snippet": "Getting startedinstallation Jekyll on MacOSThis post is about the installation and setup of a new blog/documentation site on GitHub Pages with Jekyll and the Chirpy theme. Technical notes on the initial settings of https://krisbogaerts.github.io.If followed the article https://jekyllrb.com/docs/installation/macos/ for the installation of Jekyll and requirements on Monterey (macOS 12).Site CreationFor the site creation the Chirpy has been used and initiated with “option 1 using the chirpy starter”.https://chirpy.cotes.page/posts/getting-started/#option-1-using-the-chirpy-starterThis will create a new repository from the ‘Chirpy Starter’ and you can name it .github.io, where GH_USERNAME represents your GitHub username. In this case krisbogaerts.github.ioAfter creating a site based on the template, clone your repo:git clone git@&lt;YOUR-USER-NAME&gt;/&lt;YOUR-REPO-NAME&gt;.gitthen install your dependenciescd your-repo-namebundleAfter making the first changes to your site you commit and push then up to gitgit add .git commit -m \"made some changes\"git pushSite Configuration_config.yml (Configuration) Edit with your own informationThis is my starter configuration. Everything below has not been changed from the original theme configuration# The Site Configurationtheme: jekyll-theme-chirpybaseurl: ''lang: enprefer_datetime_locale:timezone: Europe/Brusselstitle: Tech Notestagline: IT, (Cyber) Security &amp; Smart Home description: &gt;- There is no future, no past. There is only the present.url: 'https://krisbogaerts.github.io'github: username: KrisBogaertstwitter: username: BogaertsKrissocial: name: Kris Bogaerts links: - https://twitter.com/BogaertsKris - https://github.com/KrisBogaerts - https://www.linkedin.com/in/bogaertskrisgoogle_site_verification:theme_mode: darkimg_cdn:avatar: https://media-exp1.licdn.com/dms/image/C5603AQELKDvai-z10A/profile-displayphoto-shrink_200_200/0/1633932732690?e=1666828800&amp;v=beta&amp;t=Ro_IDU6cQJuIgWaZrtKoXYIR3pDmRw_yYi1BWfzRN8Ytoc: truecomments: active: disqus disqus: shortname: &lt;shortname&gt;Contact IconsI also removed the email icon from the left bottom as i don’t want to use thisedit _data/contact.yml and comment the following#-# type: email# icon: 'fas fa-envelope'# noblank: trueCreating a PostNaming ConventionsJekyll uses a naming convention for pages and postsCreate a file in _posts with the formatYEAR-MONTH-DAY-title.mdFor example:2022-05-23-homelab-docs.md2022-05-34-hardware-specs.md Jekyll can delay posts which have the date/time set for a point in the future determined by the “front matter” section at the top of your post file. Check the date &amp; time as well as time zone if you don’t see a post appear shortly after re-build.Local Linking of FilesImage from asset:... which is shown in the screenshot below:![A screenshot](/assets/screenshot.jpg)Linking to a file... you can [download the PDF](/assets/diagram.pdf) here.See more post formatting rules on the Jekyll siteMarkdown ExamplesIf you need some help with markdown, check out the markdown cheat sheetFor more neat syntax for the Chirpy theme check their demo page on making posts https://chirpy.cotes.page/posts/write-a-new-post/Locally serving your site for validationbundle exec jekyll sConfiguration file: /Users/kbo/Documents/kbo.github.io/_config.yml Theme Config file: /Users/kbo/.gem/ruby/3.1.2/gems/jekyll-theme-chirpy-5.2.1/_config.yml Source: /Users/kbo/Documents/kbo.github.io Destination: /Users/kbo/Documents/kbo.github.io/_site Incremental build: disabled. Enable with --incremental Generating... done in 0.229 seconds. Auto-regeneration: enabled for '/Users/kbo/Documents/kbo.github.io' Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop.Building your site in production modeJEKYLL_ENV=production bundle exec jekyll bThis will output the production site to _siteDeploy on GitHub PagesFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using tool scripts to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the Pages service. I am running a M1 Mac and this resulted in an error when building the site via Github Actions. The following command fixed the error for me bundle lock --add-platform x86_64-linuxPush any commit to origin/master to trigger the GitHub Actions workflow. Once the build is complete, a new remote branch called gh-pages will appear, which is used to store the built site files.Choose branch gh-pages as your GitHub Pages source.This should result is a build in the GitHub Actions on you repository You can view the details or results in case of any problems to see what is going wrongVisit your website at the address indicated by GitHub." } ]
